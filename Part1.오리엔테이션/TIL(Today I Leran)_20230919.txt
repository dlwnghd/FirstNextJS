Part 4. Next.js 심화
    Ch 05. 심화 Step 4
      03. Next.js 정리 4
        [Compiler / Preview Mode]
        컴파일러       => 언어를 다른 언어로 변환해주는 도구
        Babel / Terser => Transpiler / Minifier(mangle&compress)
        SWC            => Rust 기반이라 병렬처리가 가능해 빠르다
        Preview Mode   => 쿠키 / getStaticProps를 request time
          > ❓"Preview Mode가 뭔지 기억나시죠?"라고 했을 때 사실 기억이 나지 않았다.
            > Preview Mode는 Next.js의 SSG에서 사용자가 요청할 때마다 변경 사항을 미리 볼 수 있도록 Preview Mode(미리보기)라는 기능을 제공하는 것이다.
              > 쿠키(인증된 사용자 여부 확인)를 이용해서 사용자가 요청(request time)할 때 Data fetching하여 Preview Mode(미리보기)를 제공한다.
                > 쿠키가 있었다가 다시 지워진다면 build타임에 만들어진 정보가 나오고 Preview Mode는 제공하지 않는다.

        [Dynamic Import / Static Export]
        Dynamic Import            => Lazy load로 초기 청크 사이즈 줄이기
        Suspense                  => Promise resolved 되어야 렌더
        Automatic Static Optimize => 알아서 정적 파일과 동적 파일 구분
        Static HTML Export        => 의도적으로 정적 파일로 export 가능
          > ❓"Dynamic Import는 컴포넌트를 Lazy load하게 해주죠"라는 말을 들었을 때 한번에 이해하지 못했다.
            > Dynamic Import는 컴포넌트 또한 사용자가 보게 될 때, 즉 정말 필요할 때 호출하여 화면에 렌더링 되도록 하는 것
              > 화면에 띄울 필요가 없는(불필요한) 컴포넌트를 부르지 않기 때문에 효율적이다.
          > ❓Static HTML Export는 뭐고 왜 설명한 것이고 무엇이 안되는가?
            > Next.js 프로젝트를 정적인 파일들로만 Build 하는 것
              > ❓CDN 등에 올려서 서비스를 제공 가능
                > CDN이란 Contents Delivery Network로 물리적으로 거리가 먼 사용자와 컨텐츠 전송 비용 및 시간을 단축하기 위해 고안된 네트워크

        [Custom App / Document / Error Page]
        Absolute Imports  => Module Path aliases
        Custom App        => 상태 유지 / Page Component Wrapper
        Custom Document   => 서버에서 실행 모든 페이지에 공통인 영역
        Custom Error Page => Error 코드별로 원하는 error page 노출
          > Module Path aliases를 통해 config 파일에 파일경로명을 설정해줄 수 있다.
            > ex. ../../../components/button => @components/button

        [Performance 측정]
        web.dev         => LCP(2.5s) / FID(100ms) / CLS(0.1)
        Google          => web url 입력시 점수 측정 가능
        Chrome          => Performance / Lighthouse
        reportWebvitals => 웹서비스에 접근한 사용자의 로그 수집
          > 프로젝트 중간중간마다 Performance를 확인하는 걸 진행하면 좋을 것 같다.

        [Error Handling]
        Error             => handled vs unhandled
        Error Handling    => Development / Server / Client
        Error Page Custom => 404.js / _error.js / next/error
        Client            => Error Boundary
          > Error는 크게 Handling해서 잡을 수 있는 것과 예측하지 못해 잡지 못한 것으로 나눌 수 있는 것 같다.
            > 물론 거기서도 Server에서의 Error Client에서의 Error로도 나눌 수 있는 것 같다.
              > Next.js에서 error별 페이지를 file형식으로 관리할 수 있게 했으니 참고하여 개발하면 좋다.
                > https://nextjs.org/docs/pages/building-your-application/routing/custom-error

        [React 18과 함께 살펴보기]
        React 18               => 동시성 / 서버 컴포넌트
        SSR Streaming          => Suspense children resolved 후 stream
        React Server Component => .server.js 는 rsc만 / .client.js 는 둘다
        runtime                => node.js / edge 추천

        [Data Fetching API]
        getInitialProps    => static method / Static optimize X 
        getServerSideProps => request time / props|notFound|redirect
        getStaticPaths     => paths / fallback(false / true / ‘blocking’)
        getStaticProps     => preview / revalidate / process.cwd()

        [Router & Link API]
        Router      => useRouter / withRouter
        router 이동 => push / replace / back / reload
        router 기타 => prefetch / beforePopState / events
        Link        => router 의 페이지 이동 기능

        [기타 Advanced APIs]
        Image         => 이미지 관련 다양한 기능
        script / head => strategy / meta key
        amp / server  => AMP 대응 / Middleware & Edge API
        future image  => 조금 더 나아간 이미지 컴포넌트

        [Configuration]
        필요한 것만        => 다양한 설정이 가능, 찾아서 쓸 수 있으면 됨
        환경변수           => process.env.*
        rewrite / redirect => url 유지 / url 자체 redirect
        기타               => webpack 부터 기타 세밀한 설정까지

        [웹 서비스 배포]
        Vercel Docs  => 홈페이지 대부분 제품 설명 / Docs 존재
        Analytics    => Web vital 등 분석
        Integrations => DebugBear 적용(클릭만으로)
        기타         => 환경변수 / 도메인 / 보안 등...