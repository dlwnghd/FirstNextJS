Part 5. Final Project : 커머스 서비스 만들기
    Ch 03. 커머스 기능 구현하기
      09. 찜하기 구현
        Session 쿠키의 유지 기한 설정?
        default 30일을
        1일로 커스터마이즈해보기

        Wishlist 테이블을 만들자
        userId 기반으로 만들고
        여러개의 productId를 담을 수 있는 구조를 만들자

        로그인한 사용자만
        상품 상세 페이지에서
        찜하기 기능을 활용할 수 있도록 하자

        로그인 하지 않았다면 로그인 페이지로 보내주고
        로그인 했다면
        찜하기 X => 클릭 => 찜하기 O
        찜하기 O => 클릭 => 찜하기 X

        먼저,
        상품 목록에서 상품 상세로 진입할 수 있도록 하고
        상품 상세를 조금 가다듬자
        SSR도 적용하자

        찜하기 여부는 따로 조회해서 보여주자
        Session으로 사용자의 wishlist 목록을 조회하자

        찜하기 추가 / 삭제는
        update-wishlist 라는 하나의 endpoint로 다뤄보자

        찜하기의 상태는 누르는 순간 업데이트 하는 게 좋을까?
        어떤 타이밍에 하는게 좋을까?
        response를 받고 변경하면 너무 늦지 않을까?
        물론 loading 을 쓰면 되긴할텐데…

        업데이트한 내역이 바로 반영될 수 있도록 하기
        Optimistic updates
        (https://tanstack.com/query/v4/docs/guides/optimistic-updates)

        mutate의 data는 바라보지 말고,
        get-wishlist의 결과를 활용하자!!

        [찜하기 구현]
        찜하기                  => 사용자별 정보 저장
        Toggle                  => 하트버튼의 동작을 저장
        현재 상태와 DB 상태 싱크 => react-query를 적절히 활용
        최적화                  => 여러가지 케이스 PoC

        ⚠️ Auth.js에서 session.id를 잡으려고 할 때 DefaultSession의 타입으로 인해 오류가 발생했다.
          ✅ next-auth.d.ts 파일을 생성하여 해당 파일에서 session의 타입에 id를 추가하여 해결하였다.
            => 이전에도 다른 사람들이 같은 문제를 겪고 어떻게 해결하였는지 github뿐만이 아니라 raddit에서도 나와있었다.
            타입스크립트를 전문적으로 배운 것은 아니지만 *.d.ts 파일을 통해 내가 원하는 타입을 지정하거나 생성할 수 있는 것 같다.

        ⚠️ upsert의 경우 편리하다는 장점이 있지만 데이터의 수가 많아지만 id 즉 고유번호를 순차적으로 증가시키는 데이터를 넣을 때는 그 순서가 바뀌어 들어갈 수 있다.