Part 5. Final Project : 커머스 서비스 만들기
    Ch 03. 커머스 기능 구현하기
      15. 성능 및 최적화 고려
        commerce 서비스 페이지의 성능을 분석해보자
        https://pagespeed.web.dev/

        홈 뿐 아니라
        상품 상세도 확인해보자
        Chrome 개발자 도구 > Lighthouse
        돌릴때마다 조금씩 점수가 다를 수 있지만…

        부족한 부분들
        - mantine ui 에서 image 사용하는 부분
        - SEO 고려 덜 된 부분
        - 접근성 고려 덜 된 부분

        키워드별로 검색해서 부족한 부분을 수정하고
        Light house를 돌려보면 된다.
        배포후에 돌리기보다는 local 에서 띄워서 돌려보는게 편리

        사용하지 않는 코드 제거
        ts-prune
        (https://github.com/nadeesha/ts-prune)

        Typescript 조건 추가
        "noUnusedLocals": true,
        "noUnusedParameters": true,

        typecheck script 명령 추가
        “typecheck”: “tsc --noEmit -p tsconfig.json”

        사용하지 않는 라이브러리 제거
        yarn build 후 size 체크
        더 줄일 수 있는 부분 확인

        커머스 프로젝트 마무리
        - Next.js를 활용해서 서비스를 만들었다.
        - 대표적인 웹서비스라고 할 수 있는 커머스 서비스를 만들었다.
        - API Routes를 활용해서 간단한 api 를 만들 수 있다.
        - prisma와 planet scale를 활용해서 DB도 운영할 수 있다.
        - Emotion, Mantine ui와 TailwindCSS 활용해서 스타일링도 가능하다.

        지금까지 한 것으로 나만의 포트폴리오를 가졌다고 할 수 있다.
        하지만….
        자신있는가?
        뭐든 만들 수 있다는 자신감이 생겼는가?

        맞다면.. 축하드린다.
        아니라면…
        괜찮다.
        그게 정상이다.

        똑같은 서비스를
        우리 코드를 보지않고 다시 만들 수 있는가?
        Vercel에 올려둔 우리 서비스를 직접 들어가서 보고
        이 기능을 0에서 부터 끝까지 다시 한번 만들어보자

        기억이 잘 안나도 코드를 보지말고
        방법을 구글링해서 찾아내보자
        전혀 다른 방법으로 해당 기능을 구현해도된다.
        그렇게 0에서부터 다시 우리 커머스 서비스를 만들어냈을때,
        진짜 내 포트폴리오라고 말할 수 있을 것이다. + 자신감도 차오를 것이다.

        [성능 및 최적화 고려]
        측정이 중요             => 측정하고 수정하고 반복
        100%는 없다             => 유사한 사이트의 Lighthouse 참고
        라이브러리              => 더 나은 라이브러리를 찾아야 할 수도
        사용하지 않는 코드 정리 => 번들 사이즈를 수정